# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `SessionLogger.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module ServantsManagement
_M_ServantsManagement = Ice.openModule('ServantsManagement')
__name__ = 'ServantsManagement'

_M_ServantsManagement._t_Session = IcePy.defineValue('::ServantsManagement::Session', Ice.Value, -1, (), False, True, None, ())

if 'SessionPrx' not in _M_ServantsManagement.__dict__:
    _M_ServantsManagement.SessionPrx = Ice.createTempClass()
    class SessionPrx(Ice.ObjectPrx):

        def performAction(self, context=None):
            return _M_ServantsManagement.Session._op_performAction.invoke(self, ((), context))

        def performActionAsync(self, context=None):
            return _M_ServantsManagement.Session._op_performAction.invokeAsync(self, ((), context))

        def begin_performAction(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ServantsManagement.Session._op_performAction.begin(self, ((), _response, _ex, _sent, context))

        def end_performAction(self, _r):
            return _M_ServantsManagement.Session._op_performAction.end(self, _r)

        def getSessionInfo(self, context=None):
            return _M_ServantsManagement.Session._op_getSessionInfo.invoke(self, ((), context))

        def getSessionInfoAsync(self, context=None):
            return _M_ServantsManagement.Session._op_getSessionInfo.invokeAsync(self, ((), context))

        def begin_getSessionInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_ServantsManagement.Session._op_getSessionInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getSessionInfo(self, _r):
            return _M_ServantsManagement.Session._op_getSessionInfo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ServantsManagement.SessionPrx.ice_checkedCast(proxy, '::ServantsManagement::Session', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ServantsManagement.SessionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ServantsManagement::Session'
    _M_ServantsManagement._t_SessionPrx = IcePy.defineProxy('::ServantsManagement::Session', SessionPrx)

    _M_ServantsManagement.SessionPrx = SessionPrx
    del SessionPrx

    _M_ServantsManagement.Session = Ice.createTempClass()
    class Session(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ServantsManagement::Session')

        def ice_id(self, current=None):
            return '::ServantsManagement::Session'

        @staticmethod
        def ice_staticId():
            return '::ServantsManagement::Session'

        def performAction(self, current=None):
            raise NotImplementedError("servant method 'performAction' not implemented")

        def getSessionInfo(self, current=None):
            raise NotImplementedError("servant method 'getSessionInfo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ServantsManagement._t_SessionDisp)

        __repr__ = __str__

    _M_ServantsManagement._t_SessionDisp = IcePy.defineClass('::ServantsManagement::Session', Session, (), None, ())
    Session._ice_type = _M_ServantsManagement._t_SessionDisp

    Session._op_performAction = IcePy.Operation('performAction', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    Session._op_getSessionInfo = IcePy.Operation('getSessionInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_ServantsManagement.Session = Session
    del Session

_M_ServantsManagement._t_Logger = IcePy.defineValue('::ServantsManagement::Logger', Ice.Value, -1, (), False, True, None, ())

if 'LoggerPrx' not in _M_ServantsManagement.__dict__:
    _M_ServantsManagement.LoggerPrx = Ice.createTempClass()
    class LoggerPrx(Ice.ObjectPrx):

        def logMessage(self, message, context=None):
            return _M_ServantsManagement.Logger._op_logMessage.invoke(self, ((message, ), context))

        def logMessageAsync(self, message, context=None):
            return _M_ServantsManagement.Logger._op_logMessage.invokeAsync(self, ((message, ), context))

        def begin_logMessage(self, message, _response=None, _ex=None, _sent=None, context=None):
            return _M_ServantsManagement.Logger._op_logMessage.begin(self, ((message, ), _response, _ex, _sent, context))

        def end_logMessage(self, _r):
            return _M_ServantsManagement.Logger._op_logMessage.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_ServantsManagement.LoggerPrx.ice_checkedCast(proxy, '::ServantsManagement::Logger', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_ServantsManagement.LoggerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::ServantsManagement::Logger'
    _M_ServantsManagement._t_LoggerPrx = IcePy.defineProxy('::ServantsManagement::Logger', LoggerPrx)

    _M_ServantsManagement.LoggerPrx = LoggerPrx
    del LoggerPrx

    _M_ServantsManagement.Logger = Ice.createTempClass()
    class Logger(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::ServantsManagement::Logger')

        def ice_id(self, current=None):
            return '::ServantsManagement::Logger'

        @staticmethod
        def ice_staticId():
            return '::ServantsManagement::Logger'

        def logMessage(self, message, current=None):
            raise NotImplementedError("servant method 'logMessage' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_ServantsManagement._t_LoggerDisp)

        __repr__ = __str__

    _M_ServantsManagement._t_LoggerDisp = IcePy.defineClass('::ServantsManagement::Logger', Logger, (), None, ())
    Logger._ice_type = _M_ServantsManagement._t_LoggerDisp

    Logger._op_logMessage = IcePy.Operation('logMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())

    _M_ServantsManagement.Logger = Logger
    del Logger

# End of module ServantsManagement
